name: 'Auto Release with Calendar Versioning'
description: 'Automatically create GitHub releases using semantic-release when pushing to specified branches with calendar versioning'
author: 'GitHub Actions Workflows'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  release-branches:
    description: 'Branches to release from (JSON array format)'
    required: false
    default: '["main", "master"]'
  working-directory:
    description: 'Working directory for the action'
    required: false
    default: '.'
  semantic-release-version:
    description: 'Semantic Release version to use'
    required: false
    default: '22'

outputs:
  new-release-published:
    description: 'Whether a new release was published'
    value: ${{ steps.calendar-versioning.outputs.new-release-published }}
  new-release-version:
    description: 'Version of the new release'
    value: ${{ steps.calendar-versioning.outputs.new-release-version }}
  new-release-git-tag:
    description: 'Git tag of the new release'
    value: ${{ steps.calendar-versioning.outputs.new-release-git-tag }}
  new-release-git-head:
    description: 'Git SHA of the new release'
    value: ${{ steps.calendar-versioning.outputs.new-release-git-head }}

runs:
  using: 'composite'
  steps:
    - name: Checkout ÏΩîÎìú
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.github-token }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install local dependencies (if package.json exists)
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -f "package.json" ]; then
          echo "üì¶ Installing project dependencies..."
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          elif [ -f "pnpm-lock.yaml" ]; then
            npm install -g pnpm
            pnpm install --frozen-lockfile
          else
            npm install
          fi
        else
          echo "‚ö†Ô∏è No package.json found"
          exit 1
        fi

    - name: Set execution permission for scripts
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        chmod +x scripts/calendar-version-wrapper.js

    - name: Run calendar versioning
      id: calendar-versioning
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GIT_AUTHOR_NAME: github-actions[bot]
        GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions[bot]
        GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
      run: |
        echo "üîç Debug information:"
        echo "  - Repository: $GITHUB_REPOSITORY"
        echo "  - Current branch: $(git branch --show-current)"
        echo "  - Working directory: $(pwd)"
        echo "  - Last few commits:"
        git log --oneline -3
        echo ""
        
        echo "üìÖ Calendar Versioning ÌòïÏãù: year.month.minor.fix"
        echo "üöÄ Running calendar versioning..."
        npm run release

    - name: Create calendar version tag and release
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        if [ -n "$CALENDAR_VERSION" ]; then
          echo "Creating calendar version tag: $CALENDAR_VERSION"
          
          git tag "$CALENDAR_VERSION"
          git push origin "$CALENDAR_VERSION"
          echo "Calendar version tag created: $CALENDAR_VERSION"
          
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          
          echo "Creating GitHub release with calendar version..."
          
          # Release notes ÌååÏùºÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ Î©îÏãúÏßÄ ÏÇ¨Ïö©
          if [ -f "RELEASE_NOTES.md" ]; then
            echo "Using generated release notes from RELEASE_NOTES.md"
            gh release create "$CALENDAR_VERSION" --title "$CALENDAR_VERSION" --notes-file "RELEASE_NOTES.md" --latest
          else
            echo "Using default release notes"
            RELEASE_NOTES="Calendar Versioning Release $CALENDAR_VERSION"
            gh release create "$CALENDAR_VERSION" --title "$CALENDAR_VERSION" --notes "$RELEASE_NOTES" --latest
          fi
          echo "GitHub release created: $CALENDAR_VERSION"
          
          echo "Updating PR comments with calendar version..."
          RECENT_PRS=$(gh pr list --state merged --limit 10 --json number,mergedAt --jq '.[] | select(.mergedAt != null) | .number')
          
          for PR_NUMBER in $RECENT_PRS; do
            COMMENT_ID=$(gh api repos/:owner/:repo/issues/$PR_NUMBER/comments --jq '.[] | select(.user.login == "github-actions[bot]" and (.body | contains("This PR is included in version"))) | .id' | head -n1)
            
            if [ -n "$COMMENT_ID" ]; then
              gh api repos/:owner/:repo/issues/comments/$COMMENT_ID -X DELETE || true
              
              COMMENT_TEXT="This PR is included in version $CALENDAR_VERSION. The release is available on GitHub: https://github.com/$GITHUB_REPOSITORY/releases/tag/$CALENDAR_VERSION"
              gh pr comment $PR_NUMBER --body "$COMMENT_TEXT"
              
              echo "Updated PR #$PR_NUMBER comment with calendar version"
              break
            fi
          done
        fi

branding:
  icon: 'calendar'
  color: 'purple' 