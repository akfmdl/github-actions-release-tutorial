name: 'Auto Release with Custom Versioning'
description: 'Automatically create GitHub releases using semantic-release when pushing to specified branches with custom versioning'
author: 'GitHub Actions Workflows'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  ssh-key:
    description: 'SSH key for authentication'
    required: false
    default: ''
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  release-branches:
    description: 'Branches to release from (JSON array format)'
    required: false
    default: '["main", "master"]'
  working-directory:
    description: 'Working directory for the action'
    required: false
    default: '.'
  jira-base-url:
    description: 'Jira base URL'
    required: false
    default: 'https://your-jira-instance.atlassian.net'
  version-py-path:
    description: 'Path to version.py file (relative to working directory)'
    required: false
    default: ''

outputs:
  new-release-published:
    description: 'Whether a new release was published'
    value: ${{ steps.custom-versioning.outputs.new-release-published }}
  new-release-version:
    description: 'Version of the new release'
    value: ${{ steps.custom-versioning.outputs.new-release-version }}
  new-release-git-tag:
    description: 'Git tag of the new release'
    value: ${{ steps.custom-versioning.outputs.new-release-git-tag }}
  new-release-git-head:
    description: 'Git SHA of the new release'
    value: ${{ steps.custom-versioning.outputs.new-release-git-head }}

runs:
  using: 'composite'
  steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ssh-key: ${{ inputs.ssh-key }}
        token: ${{ inputs.github-token }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -f "package.json" ]; then
          echo "📦 Installing project dependencies..."
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          elif [ -f "pnpm-lock.yaml" ]; then
            npm install -g pnpm
            pnpm install --frozen-lockfile
          else
            npm install
          fi
        else
          echo "⚠️ No package.json found"
          exit 1
        fi

    - name: Download calendar version wrapper script
      shell: bash
      run: |
        echo "📥 Downloading calendar version wrapper script..."
        curl -fsSL -o /tmp/calendar-version-wrapper.js https://raw.githubusercontent.com/akfmdl/github-actions-workflows/main/scripts/calendar-version-wrapper.js
        chmod +x /tmp/calendar-version-wrapper.js

    - name: Run custom versioning
      id: custom-versioning
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        JIRA_BASE_URL: ${{ inputs.jira-base-url }}
        VERSION_PY_PATH: ${{ inputs.version-py-path }}
      run: |        
        echo "🚀 Running custom versioning..."
        node /tmp/calendar-version-wrapper.js

    - name: Commit and push version changes
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        VERSION_PY_PATH: ${{ inputs.version-py-path }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 변경사항 확인
        CHANGED_FILES=$(git diff --name-only)
        FILES_TO_COMMIT=""
        
        # 관심있는 파일들만 필터링
        for file in package.json $VERSION_PY_PATH; do
          if [ -f "$file" ] && echo "$CHANGED_FILES" | grep -q "^$file$"; then
            FILES_TO_COMMIT="$FILES_TO_COMMIT $file"
          fi
        done
        
        if [ -n "$FILES_TO_COMMIT" ]; then
          echo "📝 변경된 파일들을 커밋합니다:$FILES_TO_COMMIT"
          
          # 변경된 파일들을 스테이징
          git add $FILES_TO_COMMIT
          
          # NEW_VERSION 환경변수가 설정되어 있으면 사용, 아니면 기본 메시지
          if [ -n "$NEW_VERSION" ]; then
            COMMIT_MESSAGE="chore(release): $NEW_VERSION [skip ci]"
          else
            COMMIT_MESSAGE="chore: update version files [skip ci]"
          fi
          
          git commit -m "$COMMIT_MESSAGE"
          echo "✅ Git 커밋 완료: $COMMIT_MESSAGE"
          
          git push origin HEAD
          echo "✅ Git 푸시 완료"
        else
          echo "⚪ 커밋할 변경사항이 없습니다."
        fi

    # - name: Create new version tag and release
    #   shell: bash
    #   working-directory: ${{ inputs.working-directory }}
    #   env:
    #     GITHUB_TOKEN: ${{ inputs.github-token }}
    #   run: |
    #     if [ -n "$NEW_VERSION" ]; then
    #       echo "Creating new version tag: $NEW_VERSION"
          
    #       git tag "$NEW_VERSION"
    #       git push origin "$NEW_VERSION"
    #       echo "New version tag created: $NEW_VERSION"
          
    #       if ! command -v gh &> /dev/null; then
    #         echo "Installing GitHub CLI..."
    #         curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    #         echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    #         sudo apt update
    #         sudo apt install gh -y
    #       fi
          
    #       echo "Creating GitHub release with new version..."
          
    #       # Release notes 파일이 있으면 사용, 없으면 기본 메시지 사용
    #       if [ -f "RELEASE_NOTES.md" ]; then
    #         echo "Using generated release notes from RELEASE_NOTES.md"
    #         gh release create "$NEW_VERSION" --title "$NEW_VERSION" --notes-file "RELEASE_NOTES.md" --latest
    #       else
    #         echo "Using default release notes"
    #         RELEASE_NOTES="New Version Release $NEW_VERSION"
    #         gh release create "$NEW_VERSION" --title "$NEW_VERSION" --notes "$RELEASE_NOTES" --latest
    #       fi
    #       echo "GitHub release created: $NEW_VERSION"
    #     fi

branding:
  icon: 'tag'
  color: 'purple' 