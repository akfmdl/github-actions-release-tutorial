name: Docker Build, Push and Update Repository

on:
  push:
    branches:
      - test

env:
  DOCKER_REGISTRY: persolive.azurecr.io
  IMAGE_NAME: audio-engine-server
  TARGET_REPO: akfmdl/mlops-lifecycle
  TARGET_BRANCH: test
  TARGET_FILE_PATH: stg-idc/02-perso-vt/01-perso-vt-audio/01-perso-vt-audio-engine/perso-vt-audio-engine-stg.yaml

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Auto Release
      id: auto-release
      uses: akfmdl/github-actions-workflows/actions/auto-release-custom-versioning@test
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-branches: '["test"]'
        jira-base-url: https://estsoft.atlassian.net

    - name: Prepare Teams message templates
      if: steps.auto-release.outputs.new-release-published == 'true'
      id: prepare-teams-messages
      run: |
        # Teams 시작 메시지 준비
        if [ -f "scripts/teams_message_start.json" ]; then
          echo "📋 Teams 시작 메시지 템플릿 읽는 중..."
          
          # 변수 정의
          IMAGE_INFO="${{ env.IMAGE_NAME }}:${{ steps.auto-release.outputs.new-release-version }}"
          REPO_INFO="${{ env.TARGET_REPO }}"
          
          # 릴리즈 노트 섹션 생성
          RELEASE_NOTES="${{ env.RELEASE_NOTES }}"
          SECTIONS=(${RELEASE_NOTES//|||/ })
          RELEASE_NOTES_BLOCKS=""
          
          for section in "${SECTIONS[@]}"; do
            RELEASE_NOTES_BLOCKS+="{\"type\":\"TextBlock\",\"text\":\"$section\",\"wrap\":true,\"isSubtle\":true,\"markdown\":true},"
          done
          
          # 마지막 쉼표 제거
          RELEASE_NOTES_BLOCKS=${RELEASE_NOTES_BLOCKS%,}
          
          # JSON 파일 읽기 및 변수 치환
          TEAMS_START_JSON=$(cat scripts/teams_message_start.json | \
            sed "s|\${IMAGE_INFO}|${IMAGE_INFO}|g" | \
            sed "s|\${REPO_INFO}|${REPO_INFO}|g" | \
            sed "s|\"items\":\s*\[\s*{\"type\":\"TextBlock\".*\"markdown\":true\s*}\s*\]|\"items\":[${RELEASE_NOTES_BLOCKS}]|g")
          
          # 멀티라인 출력 처리
          echo "TEAMS_START_JSON<<EOF" >> $GITHUB_OUTPUT
          echo "$TEAMS_START_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "✅ Teams 시작 메시지 준비 완료"
        else
          echo "TEAMS_START_JSON=" >> $GITHUB_OUTPUT
          echo "⚠️ Teams 시작 메시지 파일이 없습니다."
        fi
        
        # Teams 완료 메시지 준비
        if [ -f "scripts/teams_message_complete.json" ]; then
          echo "📋 Teams 완료 메시지 템플릿 읽는 중..."
          
          # 변수 정의
          IMAGE_INFO="${{ env.IMAGE_NAME }}:${{ steps.auto-release.outputs.new-release-version }}"
          REPO_INFO="${{ env.TARGET_REPO }}"
          FULL_IMAGE="${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.auto-release.outputs.new-release-version }}"
          TARGET_BRANCH="${{ env.TARGET_BRANCH }}"
          UPDATED_FILE="${{ env.TARGET_FILE_PATH }}"
          GITHUB_REPOSITORY="${{ github.repository }}"
          GITHUB_RUN_ID="${{ github.run_id }}"
          
          # 성공 시 메시지 (기본값)
          ACTIVITY_TITLE="✅ Stage 배포 완료"
          STATUS_MESSAGE="Stage 배포가 성공적으로 완료되었습니다."
          
          # JSON 파일 읽기 및 변수 치환
          TEAMS_COMPLETE_JSON=$(cat scripts/teams_message_complete.json | \
            sed "s|\${IMAGE_INFO}|${IMAGE_INFO}|g" | \
            sed "s|\${REPO_INFO}|${REPO_INFO}|g" | \
            sed "s|\${FULL_IMAGE}|${FULL_IMAGE}|g" | \
            sed "s|\${TARGET_BRANCH:-default}|${TARGET_BRANCH}|g" | \
            sed "s|\${UPDATED_FILE:-없음}|${UPDATED_FILE}|g" | \
            sed "s|\${ACTIVITY_TITLE}|${ACTIVITY_TITLE}|g" | \
            sed "s|\${STATUS_MESSAGE}|${STATUS_MESSAGE}|g" | \
            sed "s|\${GITHUB_REPOSITORY}|${GITHUB_REPOSITORY}|g" | \
            sed "s|\${GITHUB_RUN_ID}|${GITHUB_RUN_ID}|g")
          
          # 멀티라인 출력 처리
          echo "TEAMS_COMPLETE_JSON<<EOF" >> $GITHUB_OUTPUT
          echo "$TEAMS_COMPLETE_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "✅ Teams 완료 메시지 준비 완료"
        else
          echo "TEAMS_COMPLETE_JSON=" >> $GITHUB_OUTPUT
          echo "⚠️ Teams 완료 메시지 파일이 없습니다."
        fi

    - name: Post-release notification
      if: steps.auto-release.outputs.new-release-published == 'true'
      run: |
        echo "🎉 새로운 릴리즈가 생성되었습니다!"
        echo "버전: ${{ steps.auto-release.outputs.new-release-version }}"
        echo "태그: ${{ steps.auto-release.outputs.new-release-git-tag }}"
        echo "SHA: ${{ steps.auto-release.outputs.new-release-git-head }}" 

    - name: Docker Build, Push and Update Repository
      id: docker-build-update
      if: steps.auto-release.outputs.new-release-published == 'true'
      uses: akfmdl/github-actions-workflows/actions/docker-build-and-update@test
      with:
        docker-registry: ${{ env.DOCKER_REGISTRY }}
        github-token: ${{ secrets.GIT_TOKEN }}
        image-name: ${{ env.IMAGE_NAME }}
        image-tag: ${{ steps.auto-release.outputs.new-release-version }}
        dockerfile-path: Dockerfile
        build-context: .
        build-args: |
          GIT_TOKEN=${{ secrets.GIT_TOKEN }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        target-repo: ${{ env.TARGET_REPO }}
        target-file-path: ${{ env.TARGET_FILE_PATH }}
        target-branch: ${{ env.TARGET_BRANCH }}
        teams-workflow-url: https://prod-29.koreacentral.logic.azure.com:443/workflows/349eefc58f9c41f8bd88fb5252bfe9c1/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YtUh3bh4RnGEUfzixwCFNlYHefFxe4y15LLUO2QrKII
        teams-message-start-json: ${{ steps.prepare-teams-messages.outputs.TEAMS_START_JSON }}
        teams-message-complete-json: ${{ steps.prepare-teams-messages.outputs.TEAMS_COMPLETE_JSON }}

    - name: Post-deployment notification
      if: steps.docker-build-update.outputs.updated-file != ''
      run: |
        echo "🎉 Docker 이미지 빌드 및 배포 완료!"
        echo "Docker Image: ${{ steps.docker-build-update.outputs.full-image-name }}"
        echo "Updated File: ${{ steps.docker-build-update.outputs.updated-file }}"
        echo "Commit Message: ${{ steps.docker-build-update.outputs.commit-message }}"