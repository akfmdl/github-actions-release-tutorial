name: Docker Build, Push and Update Repository

on:
  push:
    branches:
      - test
env:
  DOCKER_REGISTRY: persolive.azurecr.io
  IMAGE_NAME: audio-engine-server
  TARGET_REPO: akfmdl/github-actions-workflows
  TARGET_BRANCH: test
  TARGET_FILE_PATH: values.yaml
  IMAGE_TAG: 1.0.0

jobs:
  docker-build-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Prepare Teams message templates
      id: prepare-teams-messages
      run: |
        # Teams 시작 메시지 준비
        if [ -f "scripts/teams_message_start.json" ]; then
          echo "📋 Teams 시작 메시지 템플릿 읽는 중..."
          
          # 변수 정의
          IMAGE_INFO="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          REPO_INFO="${{ env.TARGET_REPO }}"
          
          # Python으로 Teams JSON 템플릿 처리 (안전한 JSON 생성)
          echo "🐍 Python으로 Teams JSON 처리 중..."
          
          # Python 스크립트로 Teams JSON 생성 (argparse 방식)
          if [ -f "scripts/teams_message_start.json" ]; then
            TEAMS_START_JSON=$(python3 scripts/process_teams_template.py \
              scripts/teams_message_start.json \
              --image-info "${IMAGE_INFO}" \
              --repo-info "${REPO_INFO}" \
              --release-notes-file "${{ env.RELEASE_NOTES_FILE }}")
            echo "📝 Python으로 Teams JSON 생성 완료"
          else
            echo "⚠️ Teams 템플릿 파일이 없습니다: scripts/teams_message_start.json"
            TEAMS_START_JSON='{"type": "message", "text": "Teams 템플릿을 찾을 수 없습니다."}'
          fi
          
          # 멀티라인 출력 처리
          echo "TEAMS_START_JSON<<EOF" >> $GITHUB_OUTPUT
          echo "$TEAMS_START_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "✅ Teams 시작 메시지 준비 완료"
        else
          echo "TEAMS_START_JSON=" >> $GITHUB_OUTPUT
          echo "⚠️ Teams 시작 메시지 파일이 없습니다."
        fi
        
        # Teams 완료 메시지 준비
        if [ -f "scripts/teams_message_complete.json" ]; then
          echo "📋 Teams 완료 메시지 템플릿 읽는 중..."
          
          # 변수 정의
          IMAGE_INFO="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          REPO_INFO="${{ env.TARGET_REPO }}"
          FULL_IMAGE="${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          TARGET_BRANCH="${{ env.TARGET_BRANCH }}"
          UPDATED_FILE="${{ env.TARGET_FILE_PATH }}"
          GITHUB_REPOSITORY="${{ github.repository }}"
          GITHUB_RUN_ID="${{ github.run_id }}"
          
          # 성공 시 메시지 (기본값)
          ACTIVITY_TITLE="✅ Stage 배포 완료"
          STATUS_MESSAGE="Stage 배포가 성공적으로 완료되었습니다."
          
          # JSON 파일 읽기 및 변수 치환
          TEAMS_COMPLETE_JSON=$(cat scripts/teams_message_complete.json | \
            sed "s|\${IMAGE_INFO}|${IMAGE_INFO}|g" | \
            sed "s|\${REPO_INFO}|${REPO_INFO}|g" | \
            sed "s|\${FULL_IMAGE}|${FULL_IMAGE}|g" | \
            sed "s|\${TARGET_BRANCH:-default}|${TARGET_BRANCH}|g" | \
            sed "s|\${UPDATED_FILE:-없음}|${UPDATED_FILE}|g" | \
            sed "s|\${ACTIVITY_TITLE}|${ACTIVITY_TITLE}|g" | \
            sed "s|\${STATUS_MESSAGE}|${STATUS_MESSAGE}|g" | \
            sed "s|\${GITHUB_REPOSITORY}|${GITHUB_REPOSITORY}|g" | \
            sed "s|\${GITHUB_RUN_ID}|${GITHUB_RUN_ID}|g")
          
          # 멀티라인 출력 처리
          echo "TEAMS_COMPLETE_JSON<<EOF" >> $GITHUB_OUTPUT
          echo "$TEAMS_COMPLETE_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "✅ Teams 완료 메시지 준비 완료"
        else
          echo "TEAMS_COMPLETE_JSON=" >> $GITHUB_OUTPUT
          echo "⚠️ Teams 완료 메시지 파일이 없습니다."
        fi

    - name: Send Teams notification - Start
      if: steps.prepare-teams-messages.outputs.TEAMS_START_JSON != ''
      shell: bash
      run: |
        if [ -z "${{ secrets.TEAMS_WORKFLOWS_URL }}" ]; then
          echo "⚠️ TEAMS_WORKFLOWS_URL이 설정되지 않았습니다. Teams 알림을 건너뜁니다."
          exit 0
        fi
        
        echo "📢 Teams 알림 전송 중: 배포 시작"
        
        # 사용자 제공 JSON을 그대로 사용
        echo '${{ steps.prepare-teams-messages.outputs.TEAMS_START_JSON }}' > teams_message_start.json
        
        # Teams Webhook으로 메시지 전송
        curl -H "Content-Type: application/json" \
             -d @teams_message_start.json \
             "${{ secrets.TEAMS_WORKFLOWS_URL }}"
        
        echo "✅ Teams 배포 시작 알림 전송 완료"

    - name: Docker Build, Push and Update Repository
      id: docker-build-update
      uses: akfmdl/github-actions-workflows/actions/docker-build-and-update@test
      with:
        docker-registry: ${{ env.DOCKER_REGISTRY }}
        github-token: ${{ secrets.GIT_TOKEN }}
        image-name: ${{ env.IMAGE_NAME }}
        image-tag: ${{ env.IMAGE_TAG }}
        dockerfile-path: Dockerfile
        build-context: .
        build-args: |
          GIT_TOKEN=${{ secrets.GIT_TOKEN }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        target-repo: ${{ env.TARGET_REPO }}
        target-file-path: ${{ env.TARGET_FILE_PATH }}
        target-branch: ${{ env.TARGET_BRANCH }}
        
    - name: Send Teams notification - Complete
      if: steps.prepare-teams-messages.outputs.TEAMS_COMPLETE_JSON != ''
      shell: bash
      run: |
        if [ -z "${{ secrets.TEAMS_WORKFLOWS_URL }}" ]; then
          echo "⚠️ TEAMS_WORKFLOWS_URL이 설정되지 않았습니다. Teams 알림을 건너뜁니다."
          exit 0
        fi
        
        echo "📢 Teams 알림 전송 중: 배포 완료"
        
        # 사용자 제공 JSON을 그대로 사용
        echo '${{ steps.prepare-teams-messages.outputs.TEAMS_COMPLETE_JSON }}' > teams_message_complete.json
        
        # Teams Webhook으로 메시지 전송
        curl -H "Content-Type: application/json" \
             -d @teams_message_complete.json \
             "${{ secrets.TEAMS_WORKFLOWS_URL }}"
        
        echo "✅ Teams 배포 완료 알림 전송 완료"

    - name: Post-deployment notification
      if: steps.docker-build-update.outputs.updated-file != ''
      run: |
        echo "🎉 Docker 이미지 빌드 및 배포 완료!"
        echo "Docker Image: ${{ steps.docker-build-update.outputs.full-image-name }}"
        echo "Updated File: ${{ steps.docker-build-update.outputs.updated-file }}"
        echo "Commit Message: ${{ steps.docker-build-update.outputs.commit-message }}"